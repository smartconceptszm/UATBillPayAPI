<?php

namespace App\Http\Services\External\BillingClients\PrePaidVendor;

class PurchaseEncryptor{

   private $rootkeystr =  "30303030303030303030303030303030"; //default rootkey, in hex 
   private $m_rootkey = "";

   /*
     * generate encrypted  purchase parameter string
     *$transactionId： 16 characters, GUID,generated by caller
     *$paymentAmount:  double,  0-999999.9
   */
   public function generatePurchaseString($transactionId, $paymentAmount,$rootkey){

      $this->rootkeystr = $rootkey;
      $this->m_rootkey = $this->setRootkey($this->rootkeystr);
      //1 Encrypt transactionId by rootkey
      $encryptTransactionId = $this->aesEncrypt($transactionId, $this->m_rootkey);
      
      //Please note is the HEX key to be used for AES encrypt double amount

      //Lets deal with payment value, convert to String, add 0x00 until 16  Bytes
      $paymentAmountString = $this->ASCIITo16Bytes($paymentAmount);

      // Which is plain Text,  $paymentAmountString OR $paymentAmountASCIIBytes ! I think $paymentAmountASCIIBytes is STRING
      $paymentAmountASCIIBytes = $this->hexStringToBytes($paymentAmountString);
      
      //Encrypt payment
      $purchaseBytes = $this->aesEncrypt($paymentAmountASCIIBytes, $encryptTransactionId);

      //to hexString
      $hexString = $this->bytesToHexString($purchaseBytes);
      return $hexString;

   }

   /*
     * get amount from encrypted  purchase parameter string
     *$transactionId： 16 characters, GUID,generated by caller
     *$code:  encrypted  purchase parameter string
   */
   public function decodePurchaseString($transactionId, $code){
      $encryptTransactionId = $this->aesencrypt($transactionId, $this->m_rootkey);
      $hexToByte = $this->hexStringToBytes($code);
      $decodePurchaseBytes = $this->aesDecrypt($hexToByte, $encryptTransactionId);
      $decodePaymentASCIIBytes = $this->bytesToHexString($decodePurchaseBytes);
      //var_dump($depaymentASCIIBytes);exit();   //313238302e3530000000000000000000
      $paymentAmount = $this->bytesToAscii($decodePaymentASCIIBytes);
      return $paymentAmount;
   }

   //================================================================
   //private functions
   //================================================================

   private function setRootkey($rootkey){
      return $this->m_rootkey = $this->hexStringToBytes($rootkey);
   }

    /*
     * AES.Encrypt
     */
    private function aesEncrypt($rawdata, $aeskey){

      // $iv = mcrypt_create_iv(mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB), MCRYPT_DEV_URANDOM);
      // $aes = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $aeskey, $rawdata, MCRYPT_MODE_ECB, $iv);

      $aes = openssl_encrypt($rawdata, 'aes-128-ecb', $aeskey, OPENSSL_RAW_DATA | OPENSSL_ZERO_PADDING);


      return $aes;
    }

   /*
     * AES.Decrypt
   */
   public function aesDecrypt($hex, $aeskey){
      // $iv = mcrypt_create_iv(mcrypt_get_iv_size($this->cipher, $this->mode), MCRYPT_DEV_URANDOM);
      // $aesDecode = mcrypt_decrypt($this->cipher, $aeskey, $hex, $this->mode,$iv);
      return $aeskey; //$aesDecode;
   }

    /*
     * ASCIITo16Bytes
     */
   private function ASCIITo16Bytes($paymentAmount){
      $len = strlen($paymentAmount);
      $paymentAmount = str_split($paymentAmount);
      for($i = 0;$i < $len;$i++){
         $array[$i] = $paymentAmount[$i]; //Check
         $array[$i] = $this->bytesToHexString($array[$i]);
      }
      $paymentAmountString = implode('', $array);
      $lenByte = strlen($paymentAmountString);
      if($lenByte < 32){
         for($i = 0;$i< (32-$lenByte);$i++){
               $paymentAmountString = $paymentAmountString.'0';
         }
      }
      return $paymentAmountString;
   }

   /*
     * 16BytesToASCII
   */
   public function bytesToAscii($decodePaymentASCIIBytes){
      $paymentAmount = $this->hexStringToBytes($decodePaymentASCIIBytes);
      return $paymentAmount;
   }

    /*
     *bytes To HexString, for display and transmit
     */
   private function bytesToHexString($bytes){

      $hexString = bin2hex($bytes);
      return $hexString;
   }

    /*
     * hexString To ASCII Characters (Bytes)
   */
   private function hexStringToBytes($hexString){
      return hex2bin($hexString);
   }



}